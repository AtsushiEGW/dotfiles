===Project Directory Structure:

.
├── bootstrap.sh
├── docker-template
│   └── docker-compose.yml
├── README.md
├── tmux
├── vscode
│   ├── keybindings.json
│   └── settings.json
└── zsh
    ├── aliases.zsh
    └── options.zsh

5 directories, 7 files



=== bootstrap.sh:

#!/usr/bin/env sh
# ~/.dotfiles/bootstrap.sh
# できるだけ簡素。root でない/ sudo が無い時は OS パッケージ導入をスキップし、
# 代わりに dotfiles の配置と oh-my-zsh/プラグインの導入だけ行う。

set -eu

log() { printf '%s\n' "$*"; }
warn() { printf 'WARN: %s\n' "$*\n" >&2; }

DOTFILES="${DOTFILES:-$HOME/.dotfiles}"
ZSH_DIR="$HOME/.oh-my-zsh"
ZSH_CUSTOM="$ZSH_DIR/custom"

# --- OS判定 ---
OS="$(uname -s 2>/dev/null || echo Unknown)"
DISTRO="linux"
[ "$OS" = "Darwin" ] && DISTRO="macos"

# --- sudo 使えるか ---
SUDO=""
if command -v sudo >/dev/null 2>&1 && [ "$(id -u)" != "0" ]; then
  SUDO="sudo"
fi

# --- 必要ならパッケージ（zsh, tmux, fzf, git） ---
install_pkgs() {
  case "$DISTRO" in
    macos)
      if ! command -v brew >/dev/null 2>&1; then
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      fi
      brew update
      brew install zsh tmux fzf git
      # fzf のキーバインド（再実行しても安全）
      "$(brew --prefix)/opt/fzf/install" --no-bash --no-fish --key-bindings --completion --no-update-rc 2>/dev/null || true
      ;;
    linux)
      if command -v apt-get >/dev/null 2>&1; then
        if [ -n "$SUDO" ] || [ "$(id -u)" = "0" ]; then
          $SUDO apt-get update -y
          $SUDO apt-get install -y --no-install-recommends zsh tmux fzf git ca-certificates
        else
          warn "apt-get を実行できないため OS パッケージ導入をスキップします"
        fi
      elif command -v apk >/dev/null 2>&1; then
        if [ -n "$SUDO" ] || [ "$(id -u)" = "0" ]; then
          $SUDO apk add --no-cache zsh tmux fzf git
        else
          warn "apk を実行できないため OS パッケージ導入をスキップします"
        fi
      fi
      ;;
    *)
      warn "未知の OS。パッケージ導入はスキップします"
      ;;
  esac
}

# --- oh-my-zsh 導入（未導入時のみ） ---
install_omz() {
  if [ ! -d "$ZSH_DIR" ]; then
    log "Installing oh-my-zsh..."
    # 非対話＆zsh未導入でもOKなようにshで実行
    RUNZSH=no CHSH=no KEEP_ZSHRC=yes \
      sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  fi
}

# --- プラグイン導入（autosuggestions / syntax-highlighting） ---
install_plugins() {
  mkdir -p "$ZSH_CUSTOM/plugins"
  if [ ! -d "$ZSH_CUSTOM/plugins/zsh-autosuggestions" ]; then
    git clone --depth=1 https://github.com/zsh-users/zsh-autosuggestions "$ZSH_CUSTOM/plugins/zsh-autosuggestions"
  fi
  if [ ! -d "$ZSH_CUSTOM/plugins/zsh-syntax-highlighting" ]; then
    git clone --depth=1 https://github.com/zsh-users/zsh-syntax-highlighting "$ZSH_CUSTOM/plugins/zsh-syntax-highlighting"
  fi
}

# --- シンボリックリンク（上書きOK・再実行安全） ---
link() {
  # usage: link SRC DST
  mkdir -p "$(dirname "$2")"
  ln -snf "$1" "$2"
}

link_dotfiles() {
  link "$DOTFILES/zsh/.zshrc"        "$HOME/.zshrc"
  link "$DOTFILES/zsh/aliases.zsh"   "$HOME/.zsh_aliases"
  link "$DOTFILES/zsh/options.zsh"   "$HOME/.zsh_options"
  link "$DOTFILES/tmux/.tmux.conf"   "$HOME/.tmux.conf"
  link "$DOTFILES/fzf/fzf.zsh"       "$HOME/.fzf.zsh"
}

# --- 実行 ---
install_pkgs
install_omz
install_plugins
link_dotfiles

log "Done. 新しいシェルで反映（例: exec zsh またはターミナル再起動）"


=== zsh/aliases.zsh:

# ~/.zsh_aliases

# OS 判定ヘルパ
is_macos() { [[ "$OSTYPE" == darwin* ]]; }

# ls
if is_macos; then
  alias ls='ls -G -F'
  alias ll='ls -alGh'
else
  alias ls='ls --color=auto -F'
  alias ll='ls -alh --color=auto'
fi
alias la='ls -A'

# grep/cat
alias grep='grep --color=auto'

# 安全系
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'

# Git
alias g='git'
alias gs='git status'
alias gst='git status -sb'
alias gco='git checkout'
alias ga='git add -A'
alias gc='git commit'
alias gp='git push'
alias gpl='git pull --rebase'

# tmux
alias ta='tmux attach -t'
alias tn='tmux new -s'
alias tls='tmux ls'

# クリップボード
if is_macos; then
  alias clip='pbcopy'
elif command -v xclip >/dev/null 2>&1; then
  alias clip='xclip -selection clipboard'
fi

# パス移動
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'


=== zsh/options.zsh:

# ~/.zsh_options

setopt AUTO_MENU AUTO_LIST MENU_COMPLETE
setopt INTERACTIVE_COMMENTS
setopt BANG_HIST EXTENDED_HISTORY INC_APPEND_HISTORY SHARE_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST HIST_IGNORE_DUPS HIST_IGNORE_ALL_DUPS HIST_REDUCE_BLANKS HIST_VERIFY
HISTFILE="$HOME/.zsh_history"
HISTSIZE=200000
SAVEHIST=200000

# completion 見た目（重たくならない最小限）
zmodload zsh/complist 2>/dev/null || true
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' special-dirs true
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'


=== zsh/.zshrc:

# ~/.zshrc - oh-my-zsh ベース（シンプル）
export LANG=${LANG:-en_US.UTF-8}

# PATH（ユーザ系を少し前に）
typeset -U path PATH
path=(
  $HOME/.local/bin
  $path
)
export PATH

# oh-my-zsh 本体
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="robbyrussell"   # シンプルで等幅フォントでも崩れにくい
# プラグイン順序に注意：syntax-highlighting は最後
plugins=(
  git
  fzf
  zsh-autosuggestions
  zsh-syntax-highlighting
)

source "$ZSH/oh-my-zsh.sh"

# 別ファイル（再利用しやすく分割）
[ -f "$HOME/.zsh_options" ]  && source "$HOME/.zsh_options"
[ -f "$HOME/.zsh_aliases" ]  && source "$HOME/.zsh_aliases"

# fzf（未導入でも無害／macとLinux両対応）
# 1) デフォルト検索コマンド
if (( $+commands[rg] )); then
  export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git"'
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
elif (( $+commands[fd] )); then
  export FZF_DEFAULT_COMMAND='fd --hidden --follow --exclude .git'
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
else
  export FZF_DEFAULT_COMMAND='find . -type f -not -path "*/.git/*"'
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi
export FZF_DEFAULT_OPTS='--height 40% --reverse --border --inline-info --cycle'

# 2) キーバインド/補完（Homebrew or distro or ユーザ）
if [[ -f "/usr/share/doc/fzf/examples/key-bindings.zsh" ]]; then
  source /usr/share/doc/fzf/examples/key-bindings.zsh
elif [[ -f "/usr/share/fzf/key-bindings.zsh" ]]; then
  source /usr/share/fzf/key-bindings.zsh
elif command -v brew >/dev/null 2>&1 && [[ -f "$(brew --prefix)/opt/fzf/shell/key-bindings.zsh" ]]; then
  source "$(brew --prefix)/opt/fzf/shell/key-bindings.zsh"
elif [[ -f "$HOME/.fzf.zsh" ]]; then
  source "$HOME/.fzf.zsh"
fi

# 補足： oh-my-zsh の fzf プラグインは存在チェックだけ。上の key-bindings で十分です。